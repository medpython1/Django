"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-d(&g%zx#nnk^^v%_v1ae%9+b%!t-#85cdz$v(j0ntl#wo3$^!3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["54.82.35.93"]
STATIC_ROOT = '/var/www/mysite/assets/'

# Application definition
from mongoengine import connect
from pymongo import MongoClient

client = MongoClient("mongodb://mongo:27017/mydatabase")

connect(
    db="mydatabase",    # The name of your database
    host="54.82.35.93",            # MongoDB server host
    port=27017,                  # MongoDB server port (default is 27017)
    username="root",    # Optional: If using authentication, provide the username
    password="123456",    # Optional: If using authentication, provide the password
    authentication_source="admin",  # Optional: If using authentication, set the auth source
)
# DATABASES = {
#     'default': {
#         'ENGINE': 'djongo',                           # Use Djongo as the database engine
#         'NAME': 'mydatabase',                         # The same database name as MongoEngine
#         'CLIENT': {
#             'host': 'mongodb://localhost:27017/',    # Ensure this is correct for your setup
#         }
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'djongo',  # Or 'django.db.backends.dummy' if using MongoEngine
        'NAME': 'myDatabase',
        'CLIENT': {
            'host': 'mongodb://root:root1234@54.152.136.95:27017/',
            'authMechanism': 'SCRAM-SHA-256'  # Optional: depends on your MongoDB setup
        }
    }
}
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Set the session to expire when the user closes the browser
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Set how long the session should last (e.g., 1 hour)
SESSION_COOKIE_AGE = 1500  # 1 hour (3600 seconds)

# Ensure session cookies are set to secure only if you're using HTTPS
SESSION_COOKIE_SECURE = False  # Set to True if using HTTPS

# CSRF protection should be enabled to ensure security
CSRF_COOKIE_SECURE = False  # Set to True if using HTTPS
SESSION_COOKIE_DOMAIN = None

SESSION_SAVE_EVERY_REQUEST = True  # Ensure the session is saved after every request
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Don't expire the session when the browser is closed


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'myapp.middleware.NoCacheMiddleware',
]

CACHE_MIDDLEWARE_SECONDS = 0  # Disable cache
CACHE_MIDDLEWARE_KEY_PREFIX = ''
ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
# Authentication settings
# LOGIN_URL = 'login.html'  # Redirect to login page if not authenticated
# LOGOUT_REDIRECT_URL = 'logout.html'  # Redirect to login after logout
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = '/'
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'myapp/static')]


WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'myapp/static')]   
APPEND_SLASH = True
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
from django.contrib.messages import constants as messages

MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'


# Optional: Customize message tags (this is useful if you're using Bootstrap for styling)
MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',  # Error messages will have the Bootstrap 'danger' class
}
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'pdfs')
